{"version":3,"sources":["Counter/Terminal/Count-number/Number.module.css","Counter/Console/Console.module.css","Counter/Terminal/Terminal.module.css","Counter/SettingsBar/SettingsBar.module.css","Counter/Terminal/Count-number/Number.jsx","Counter/Terminal/Terminal.jsx","Counter/Console/Console.jsx","Counter/SettingsBar/SettingsBar.jsx","Counter/Terminal/TerminalContainer.jsx","Redux/CounterReducer.js","Counter/Console/ConsoleContainer.jsx","Counter/SettingsBar/SettingsBarContainer.jsx","App.js","Redux/Store.js","serviceWorker.js","index.js"],"names":["module","exports","Number","props","className","reductionMode","style","redMode","alertDisplay","number","Terminal","check","count","maxCount","stopTimerThunk","render","display","countDisplay","map","n","terminal","newNumbers","Array","fill","totalCount","from","this","toString","reverse","forEach","value","index","array","v","React","Component","Console","classForDisabled","disabled","console","onClick","increaseCount","resetCount","decreaseCount","increaseSpeed","timerSpeed","decreaseSpeed","timerOn","runTimerThunk","SettingsBar","state","countSetter","reductionNumber","inputOnNumbers","minCount","alert","alertMessage","onInputChange","e","newCount","target","setState","onSetClick","setMaxBorderOfCount","setMinBorderOfCount","countSetterChange","redactionModeChanger","changeMode","slider","onChange","type","min","max","text","btn","TerminalContainer","connect","counterReducer","interval","initialState","action","decreasedCount","boolean","parseInt","dispatch","clearInterval","ConsoleContainer","getState","speed","setInterval","SettingsBarContainer","App","reducers","combineReducers","store","createStore","applyMiddleware","thunk","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8f7d67fc.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"number\":\"Number_number__3YlPB\",\"redMode\":\"Number_redMode__27qco\",\"alertDisplay\":\"Number_alertDisplay__33DNi\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"console\":\"Console_console__34U2R\",\"disabled\":\"Console_disabled__3OMmz\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"terminal\":\"Terminal_terminal__3dV-6\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"reductionMode\":\"SettingsBar_reductionMode__2ZlfJ\",\"btn\":\"SettingsBar_btn__M9xV5\",\"console\":\"SettingsBar_console__2QZ2Q\",\"text\":\"SettingsBar_text__2DugV\",\"slidecontainer\":\"SettingsBar_slidecontainer__3u9gh\",\"slider\":\"SettingsBar_slider__3ikcm\",\"alert\":\"SettingsBar_alert__3aL7-\"};","import React from 'react';\r\nimport style from './Number.module.css'\r\n\r\nlet Number = function (props) {\r\n\r\nlet classForReductionMode = () => {\r\n    if (props.reductionMode === true) {\r\n        return style.redMode\r\n    } else if (props.alertDisplay === true) {\r\n        return style.alertDisplay\r\n    } else {\r\n        return style.number\r\n    }\r\n};\r\n\r\n    return (\r\n        <span className={classForReductionMode()}>\r\n            {props.number}\r\n        </span>\r\n    )\r\n};\r\n\r\n\r\nexport default Number;\r\n","import React from 'react';\r\nimport Number from \"./Count-number/Number\";\r\nimport style from './Terminal.module.css'\r\n\r\n\r\nclass Terminal extends React.Component {\r\n\r\n    countDisplay() {\r\n        let newNumbers = Array(4).fill(0);\r\n        let totalCount = Array.from((this.props.count).toString()).reverse();\r\n        newNumbers.forEach((value, index, array) => {\r\n            let v = totalCount[index];\r\n            array[index] = v ? v : 0;\r\n        });\r\n        return newNumbers.reverse();\r\n    }\r\n\r\n    check = () => {if (this.props.count === this.props.maxCount) {this.props.stopTimerThunk()}};\r\n    render = () => {\r\n        let display = this.countDisplay().map(n =>\r\n            <Number number={n} reductionMode={this.props.reductionMode} alertDisplay={this.props.alertDisplay}/>\r\n        );\r\n        return (\r\n            <div className={style.terminal}>\r\n                {display}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nexport default Terminal;\r\n","import React from 'react';\r\nimport './../../App.css';\r\nimport style from './Console.module.css'\r\n\r\nlet Console = function (props) {\r\n    let classForDisabled = () => props.reductionMode ? style.disabled : style.console;\r\n    let check = () => props.count >= props.maxCount ? props.stopTimerThunk(): '';\r\n    check();\r\n    return (\r\n        <div>\r\n            <div className={classForDisabled()}>\r\n                <button disabled={props.reductionMode} onClick={props.increaseCount}>\r\n                    +\r\n                </button>\r\n                <button disabled={props.reductionMode} onClick={()=>{props.resetCount(); props.stopTimerThunk();}}>\r\n                  Reset\r\n                </button>\r\n                <button disabled={props.reductionMode} onClick={props.decreaseCount}>\r\n                    -\r\n                </button>\r\n            </div>\r\n            <div className={classForDisabled()}>\r\n                <button disabled={props.reductionMode} onClick={()=>{props.increaseSpeed(); props.stopTimerThunk();}}>\r\n                  {  \"<<=\"}\r\n                </button>\r\n                <span>{props.timerSpeed / 1000} s</span>\r\n                <button disabled={props.reductionMode} onClick={()=>{props.decreaseSpeed(); props.stopTimerThunk();}}>\r\n                    =>>\r\n                </button>\r\n                {!props.timerOn && <button disabled={props.reductionMode} onClick={!props.timerOn ? props.runTimerThunk :''}>\r\n                    Start\r\n                </button>}\r\n                {props.timerOn && <button disabled={props.reductionMode} onClick={props.stopTimerThunk}>\r\n                    Stop\r\n                </button>}\r\n            </div>\r\n        </div>\r\n    )\r\n};\r\n\r\n\r\nexport default Console;\r\n","import React from 'react';\r\nimport style from './SettingsBar.module.css';\r\n\r\nclass SettingsBar extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    state = {\r\n        countSetter: 'MIN',\r\n        reductionNumber: 0,\r\n        inputOnNumbers: this.props.minCount,\r\n        alert: false,\r\n        alertMessage: '',\r\n    };\r\n\r\n    onInputChange = (e) => {\r\n        let newCount = e.target.value;\r\n        if (this.state.countSetter === 'MIN') {\r\n            newCount >= -999 && newCount <= this.props.maxCount ?\r\n                this.setState({inputOnNumbers: newCount, alert: false}) :\r\n                this.setState({inputOnNumbers: newCount, alert: true, alertMessage: 'count not less -999 or max count'});\r\n        }else if (this.state.countSetter === 'MAX'){\r\n            newCount <= 9999 && newCount >= this.props.minCount ?\r\n                this.setState({inputOnNumbers: newCount, alert: false}) :\r\n                this.setState({inputOnNumbers: newCount, alert: true, alertMessage: 'count not more 9999 or max count'});\r\n        }\r\n    };\r\n    onSetClick = () => {\r\n        if (this.state.countSetter === 'MIN' && !this.state.alert) {\r\n            this.props.setMinBorderOfCount(this.state.inputOnNumbers);\r\n        } else if (this.state.countSetter === 'MAX' && !this.state.alert){\r\n            this.props.setMaxBorderOfCount(this.state.inputOnNumbers)\r\n        } else {\r\n            this.setState({alert: true})\r\n        }\r\n    };\r\n\r\n    countSetterChange = () => {\r\n        if (this.state.countSetter === 'MIN') {\r\n            this.setState({countSetter: 'MAX', inputOnNumbers: this.props.maxCount})\r\n        } else {this.setState({countSetter: 'MIN', inputOnNumbers: this.props.minCount})}\r\n    };\r\n    redactionModeChanger = (e) => {\r\n        if (e.target.value < 1 && !this.state.alert) {\r\n            this.props.changeMode(false);\r\n            this.setState({reductionNumber: 0})\r\n        }else if (e.target.value >= 1) {\r\n            this.props.changeMode(true);\r\n            this.props.stopTimerThunk();\r\n            this.setState({reductionNumber: 1})\r\n        } else {\r\n            this.setState({alert: true})\r\n        }\r\n    };\r\n\r\n\r\n    render = () => {\r\n        let classForReductionMode = () =>\r\n            this.props.reductionMode ? style.reductionMode : style.console;\r\n        let classForAlert = () => this.state.alert ? style.alert : '';\r\n\r\n        return (\r\n            <div className={classForReductionMode()}>\r\n                <input className={style.slider}\r\n                       onChange={this.redactionModeChanger}\r\n                       type=\"range\" min={0} max={1} value={this.state.reductionNumber}\r\n                />\r\n                <div className={classForAlert()}>\r\n                    {this.state.alert&&<p><span>{this.state.alertMessage}</span></p>}\r\n                    <p><span>min = {this.props.minCount} </span></p>\r\n                    <p><span>max = {this.props.maxCount} </span></p>\r\n                    <input disabled={!this.props.reductionMode}\r\n                           value={this.state.inputOnNumbers}\r\n                           onChange={this.onInputChange}\r\n                           className={style.text} type=\"number\"/>\r\n                    <button disabled={!this.props.reductionMode||this.state.alert}\r\n                            className={style.btn} onClick={this.onSetClick}>\r\n                        set\r\n                    </button>\r\n                </div>\r\n\r\n                <div>\r\n                    {this.state.countSetter === 'MAX' && <button\r\n                        disabled={!this.props.reductionMode}\r\n                        className={style.btn} onClick={this.countSetterChange}\r\n                    >max</button>}\r\n                    {this.state.countSetter === 'MIN' && <button\r\n                        disabled={!this.props.reductionMode}\r\n                        className={style.btn} onClick={this.countSetterChange}\r\n                    >min</button>}\r\n                </div>\r\n            </div>\r\n        )\r\n    };\r\n}\r\n\r\nexport default SettingsBar;\r\n","import React from 'react';\r\nimport Terminal from \"./Terminal\";\r\nimport {connect} from \"react-redux\";\r\n\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        count: state.counterReducer.count,\r\n        reductionMode: state.counterReducer.reductionMode,\r\n        alertDisplay: state.counterReducer.alertDisplay,\r\n    }\r\n};\r\n\r\nconst TerminalContainer = connect(mapStateToProps, {})(Terminal);\r\n\r\nexport default TerminalContainer;\r\n","//initialising action\r\nconst INCREASE_COUNT = 'INCREASE_COUNT';\r\nconst DECREASE_COUNT= 'DECREASE_COUNT';\r\nconst CHANGE_MODE = 'CHANGE_MODE';\r\nconst RESET_COUNT = 'RESET_COUNT';\r\nconst INCREASE_SPEED = 'INCREASE_SPEED';\r\nconst DECREASE_SPEED = 'DECREASE_SPEED';\r\nconst SET_COUNT_MIN_BORDER = 'SET_COUNT_MIN_BORDER';\r\nconst SET_COUNT_MAX_BORDER = 'SET_COUNT_MAX_BORDER';\r\nconst START_TIMER = 'START_TIMER';\r\nconst STOP_TIMER = 'STOP_TIMER';\r\n\r\n//initialising state\r\nconst initialState = {\r\n    count: 0,\r\n    timerOn: false,\r\n    maxCount: 99,\r\n    minCount: -44,\r\n    timerSpeed: 500,\r\n    reductionMode: false,\r\n    alertDisplay: false,\r\n};\r\n\r\n//reducer\r\nlet counterReducer = (state = initialState, action) => {\r\n    let newSpeed;\r\n    let newCount;\r\n\r\n    switch (action.type) {\r\n        case DECREASE_COUNT :\r\n            let decreasedCount = state.count - 1;\r\n            if (decreasedCount >= state.minCount) {\r\n                return {\r\n                    ...state,\r\n                    count: decreasedCount,\r\n                    alertDisplay: false\r\n                };\r\n            } else {\r\n                return {\r\n                    ...state,\r\n                    alertDisplay: true\r\n                };\r\n            }\r\n        case CHANGE_MODE:\r\n            return {\r\n                ...state,\r\n                reductionMode: action.boolean,\r\n            };\r\n        case RESET_COUNT:\r\n            if (state.minCount > 0){\r\n                return {\r\n                    ...state,\r\n                    count: state.minCount,\r\n                    alertDisplay: false,\r\n                };\r\n            } else if (state.maxCount <= 0){\r\n                return {\r\n                    ...state,\r\n                    count: state.maxCount,\r\n                    alertDisplay: false,\r\n                };\r\n            } else {\r\n                return {\r\n                    ...state,\r\n                    count: 0,\r\n                    alertDisplay: false,\r\n                };\r\n            }\r\n        case SET_COUNT_MIN_BORDER:\r\n            if (action.count >= state.count) {\r\n                return {\r\n                    ...state,\r\n                    count: parseInt(action.count),\r\n                    minCount: action.count,\r\n                };\r\n            } else {\r\n                return {\r\n                    ...state,\r\n                    minCount: action.count,\r\n                };\r\n            }\r\n        case SET_COUNT_MAX_BORDER:\r\n            if (action.count <= state.count) {\r\n                return {\r\n                    ...state,\r\n                    count: parseInt(action.count),\r\n                };\r\n            } else {\r\n                return {\r\n                    ...state,\r\n                    maxCount: action.count,\r\n                };\r\n            }\r\n        case START_TIMER:\r\n            return {\r\n                ...state,\r\n                timerOn: true\r\n            };\r\n        case STOP_TIMER:\r\n            return {\r\n                ...state,\r\n                timerOn: false,\r\n            };\r\n        case INCREASE_SPEED:\r\n            newSpeed = state.timerSpeed * 2;\r\n            return {\r\n                ...state,\r\n                timerSpeed: newSpeed,\r\n            };\r\n        case DECREASE_SPEED:\r\n            newSpeed = state.timerSpeed / 2;\r\n            return {\r\n                ...state,\r\n                timerSpeed: newSpeed\r\n            };\r\n        case INCREASE_COUNT:\r\n            newCount = state.count + 1;\r\n            if (newCount <= state.maxCount) {\r\n                return {\r\n                    ...state,\r\n                    count: parseInt(newCount),\r\n                    alertDisplay: false\r\n                };\r\n            } else {\r\n                return {\r\n                    ...state,\r\n                    alertDisplay: true,\r\n                    timerOn: false,\r\n                };\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default counterReducer;\r\n\r\n//action creators\r\nexport const increaseCount  = () => ({type: INCREASE_COUNT});\r\nexport const decreaseCount  = () => ({type: DECREASE_COUNT});\r\nexport const changeMode  = (boolean) =>\r\n    ({type: CHANGE_MODE, boolean: boolean,});\r\nexport const resetCount  = () => ({type: RESET_COUNT});\r\nexport const increaseSpeed  = () => ({type: INCREASE_SPEED});\r\nexport const decreaseSpeed  = () => ({type: DECREASE_SPEED});\r\nexport const setMinBorderOfCount  = (number) =>\r\n    ({type: SET_COUNT_MIN_BORDER, count: number,});\r\nexport const setMaxBorderOfCount  = (number) =>\r\n    ({type: SET_COUNT_MAX_BORDER, count: number,});\r\nexport const startTimer = () => ({type: START_TIMER});\r\nexport const stopTimer = () => ({type: STOP_TIMER});\r\n\r\n// THUNK CREATORS\r\nlet interval;\r\n\r\nexport const runTimerThunk = () => (dispatch, getState) => {\r\n    const speed = getState().counterReducer.timerSpeed;\r\n    dispatch(startTimer());\r\n    interval = setInterval(()=>{\r\n        dispatch(increaseCount())\r\n    },speed)\r\n};\r\nexport const stopTimerThunk = () => (dispatch) => {\r\n    dispatch(stopTimer());\r\n    clearInterval(interval)\r\n};","import React from 'react';\r\nimport './../../App.css';\r\nimport Console from \"./Console\";\r\nimport {\r\n    decreaseCount, decreaseSpeed,\r\n    increaseCount, increaseSpeed,\r\n    resetCount, runTimerThunk,\r\n    stopTimerThunk,\r\n} from \"../../Redux/CounterReducer\";\r\nimport {connect} from \"react-redux\";\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        reductionMode: state.counterReducer.reductionMode,\r\n        timerOn: state.counterReducer.timerOn,\r\n        timerSpeed: state.counterReducer.timerSpeed,\r\n    }\r\n};\r\n\r\nconst ConsoleContainer = connect(mapStateToProps, {\r\n    increaseCount, decreaseCount, increaseSpeed, decreaseSpeed, resetCount, runTimerThunk, stopTimerThunk\r\n})(Console);\r\n\r\nexport default ConsoleContainer;\r\n","import React from 'react';\r\nimport SettingsBar from \"./SettingsBar\";\r\nimport {\r\n    changeMode,\r\n    setMaxBorderOfCount, setMinBorderOfCount, stopTimerThunk\r\n} from \"../../Redux/CounterReducer\";\r\nimport {connect} from \"react-redux\";\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        minCount: state.counterReducer.minCount,\r\n        maxCount: state.counterReducer.maxCount,\r\n        reductionMode: state.counterReducer.reductionMode,\r\n        count: state.counterReducer.count,\r\n    }\r\n};\r\n\r\nconst SettingsBarContainer = connect(mapStateToProps, {\r\n    changeMode, setMaxBorderOfCount, setMinBorderOfCount, stopTimerThunk\r\n})(SettingsBar);\r\n\r\nexport default SettingsBarContainer;\r\n","import React from 'react';\nimport './App.css';\nimport Terminal from \"./Counter/Terminal/Terminal\";\nimport Console from \"./Counter/Console/Console\";\nimport SettingsBar from \"./Counter/SettingsBar/SettingsBar\";\nimport TerminalContainer from \"./Counter/Terminal/TerminalContainer\";\nimport ConsoleContainer from \"./Counter/Console/ConsoleContainer\";\nimport SettingsBarContainer from \"./Counter/SettingsBar/SettingsBarContainer\";\n\nclass App extends React.Component {\n    //\n    // state = {\n    //     numbers: [\n    //         0,\n    //         0,\n    //         0,\n    //         0,\n    //     ],\n    //     count: 0,\n    //     timerOn: false,\n    //     maxCount: 500,\n    //     minCount: -999,\n    //     timerSpeed: 500,\n    //     reductionMode: false,\n    //     alertDisplay: false,\n    // };\n    //\n    // increaseCount = () => {\n    //     let newCount = this.state.count + 1;\n    //     if (newCount <= this.state.maxCount) {\n    //         this.showCount(newCount);\n    //         this.setState({alertDisplay: false})\n    //     } else {\n    //         this.startTimer('stop');\n    //         this.setState({alertDisplay: true})\n    //     }\n    // };\n    //\n    // decreaseCount = () => {\n    //     let newCount = this.state.count - 1;\n    //     if (newCount >= this.state.minCount) {\n    //         this.showCount(newCount);\n    //         this.setState({alertDisplay: false});\n    //     } else {\n    //         this.setState({alertDisplay: true});\n    //     }\n    // };\n    //\n    // changeMode = (number) => {\n    //     this.setState({reductionMode: number});\n    //     console.log(this.state.reductionMode)\n    // };\n    //\n    // resetCount = () => {\n    //     this.showCount(0);\n    // };\n    //\n    // increaseSpeed = () => {\n    //     let newSpeed = this.state.timerSpeed / 2;\n    //     this.setState({timerSpeed: newSpeed});\n    //     this.startTimer('stop');\n    // };\n    //\n    // decreaseSpeed = () => {\n    //     let newSpeed = this.state.timerSpeed * 2;\n    //     this.setState({timerSpeed: newSpeed, timerOn: true});\n    //     this.startTimer('stop');\n    // };\n    //\n    // setBorderOfCount = (count, dir) => {\n    //     if ( dir === 'min') {\n    //         this.setState({minCount: count});\n    //     } else if (dir === 'max') {\n    //         this.setState({maxCount: count});\n    //     }\n    // };\n    //\n    // showCount = (newCount) => {\n    //     let newNumbers = [];\n    //     let totalCount = Array.from(newCount.toString()).map(n=>n);\n    //         for (let i = 0; i < totalCount.length; i++) {\n    //             newNumbers.push(totalCount[i]);\n    //         }\n    //     if (totalCount.length <= 3) {\n    //         newNumbers.unshift('0');\n    //     }\n    //     if (totalCount.length <= 2) {\n    //         newNumbers.unshift('0');\n    //     }\n    //     if (totalCount.length <= 1) {\n    //         newNumbers.unshift('0');\n    //     }\n    //     this.setState({numbers: newNumbers, count: newCount});\n    // };\n    //\n    // startTimer = (action) => {\n    //     if (action === 'start') {\n    //         this.counterIntervalId = setInterval(this.increaseCount, this.state.timerSpeed);\n    //         this.setState({timerOn: true})\n    //     } else if (action === 'stop') {\n    //     clearInterval(this.counterIntervalId);\n    //     this.setState({timerOn: false});\n    //     }\n    // };\n\n\n    render = () => {\n        return (\n            <div className=\"App\">\n                <header className=\"App-header\">\n                    <span><h1>Counter by Benedikt</h1></span>\n                </header>\n\n                <TerminalContainer />\n\n                <ConsoleContainer />\n\n                <SettingsBarContainer />\n            </div>\n        )\n    };\n}\n\nexport default App;\n","import {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport counterReducer from './CounterReducer';\r\nimport thunk from \"redux-thunk\";\r\n\r\nlet reducers = combineReducers({\r\n   counterReducer\r\n});\r\n\r\nlet store = createStore(reducers, applyMiddleware(thunk));\r\n\r\nexport default store;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport store from './Redux/Store'\nimport * as serviceWorker from './serviceWorker';\nimport {Provider} from \"react-redux\";\n\n\n    ReactDOM.render(\n        <Provider store={store}>\n            <App/>\n        </Provider>, document.getElementById('root')\n    );\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}